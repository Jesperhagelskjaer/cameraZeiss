clear
%close all

% Generated by http://www.micromodeler.com/dsp/ using Frequency Sampling (Inverse DFT)
%% ###########################################################
% Create FIR filter using the frequency sampling method with a window
% The length, or number of taps of the filter

filter1.length=60; %Filter order
filter1.fs=30000; %Samplings frequency Hz
filter1.groupDelay=(filter1.length/2)/filter1.fs; %Group delay in sec.

filter1.fc1=200; %Frequency cut 1 (start of bandpass) 300Hz
filter1.fc2=6000; %Frequency cut 2 (end of bandpass) 6000Hz
filter1.fc3=8000; %Transition band between fc2 and fc3 
filter1.gain = 1.0; %Filter gain 0dB

wc1 = (filter1.fc1/filter1.fs)*2; %Normalized frequency
wc2 = (filter1.fc2/filter1.fs)*2;
wc3 = (filter1.fc3/filter1.fs)*2;

% The frequencies at the band edges
filter1.frequencies = [ 0, wc1, wc2, wc3, 1 ]; 
	
% The desired response
filter1.desired = [ 0, 1, 1, 0, 0 ]; %Bandpass filter

% Kilosort filter
n = 3; % Order of butterworth filter
fpass = [filter1.fc1 filter1.fc2];
[b, a] = butter(n, fpass*2/filter1.fs);

% Design the filter using the frequency sampling method and different windows
filter1.denominator = 1; % a coefficients (FIR filter)
filter1.numerator = fir2( filter1.length-1, filter1.frequencies, filter1.desired, rectwin(filter1.length) ) * filter1.gain; % hann, hamming, blackman
%filter1.numerator = fir2( filter1.length-1, filter1.frequencies, filter1.desired, rectwin(filter1.length) ) * filter1.gain;
%filter1.numerator = firls( filter1.length-1, filter1.frequencies, filter1.desired, 'hilbert') * filter1.gain; 

% Experiments - not used
%b = firls(255,[0 0.25 0.3 1],[1 1 0 0]);
%Num_coeffs = firpm(filter1.length-1, filter1.frequencies, filter1.desired,'h');
%filter1.numerator = dfilt.dfasymfir(Num_coeffs);
%Hd = dfilt.dfasymfir(filter1.numerator);
%impz(Hd)
%filter1.numerator = Hd.numerator;
%filter1.z_zeros = [filter1.z_zeros; 1+0*i]; % Add zero in 1 and -1
%filter1.numerator = poly(filter1.z_zeros);

fvtool(filter1.numerator, filter1.denominator, 'OverlayedAnalysis','phase')
%fvtool(b, a, 'OverlayedAnalysis','phase')
%filter1 = AnalyseFilter(filter1);

SaveFilterHeaderFile(filter1.numerator, filter1.fc1, 'FilterCoeffs_test.h');

%% Save coefficeints to header file

noiseLevel=0.03; % 0.03 standard variation of noise

% Test filter on templates
load 'simulation_parameters.mat'
for i=1:76
    w = waves(:,:,i);
    w = [w; zeros(size(w)); zeros(size(w))]; % Zero padding
    n = noiseLevel*randn(size(w));
    ws = w+n;
    y = filter(filter1.numerator,filter1.denominator,ws);%FIR filter
    yk = filtfilt(b,a,ws); %Kilosort filter
    W = abs(fft(ws));
    WS = sum(W');
    Y = abs(fft(y));
    YS = sum(Y');
    YK = abs(fft(yk));
    YKS = sum(YK');
    fx = (1:size(y,1)).*(filter1.fs/size(y,1));
    figure(5), 
    subplot(2,1,1);
    surf(ws); %ws,W
    title('Frequency response of template and noise');
    subplot(2,1,2);
    surf(y); %y,Y
    title('Frequency response of filtered template and noise');
    
    figure(6)
    plot(fx, WS, 'b');
    xlabel('frequency');
    title('Frequency response of template and noise (SUM of channels) (red-filtered)');
    hold on;
    plot(fx, YS, 'r');
    plot(fx, YKS, 'k');
    hold off;
    yl = noiseLevel*450+15;
    ylim([0 yl]);
    legend('Unfiltered', 'FIR', 'Kilosort');
    
    pause(0.1)
%    pause()
end

